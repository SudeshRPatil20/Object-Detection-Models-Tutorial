{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":2431805,"sourceType":"datasetVersion","datasetId":8782}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sudeshrpatil/working-with-alex-net?scriptVersionId=263809067\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# # For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# # Input data files are available in the read-only \"../input/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-24T18:02:34.614827Z","iopub.execute_input":"2025-09-24T18:02:34.615102Z","iopub.status.idle":"2025-09-24T18:02:34.619504Z","shell.execute_reply.started":"2025-09-24T18:02:34.615084Z","shell.execute_reply":"2025-09-24T18:02:34.618845Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import torch\ntorch.cuda.is_available()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T10:37:21.551371Z","iopub.execute_input":"2025-07-29T10:37:21.55198Z","iopub.status.idle":"2025-07-29T10:37:25.627163Z","shell.execute_reply.started":"2025-07-29T10:37:21.551957Z","shell.execute_reply":"2025-07-29T10:37:25.62649Z"}},"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}],"execution_count":1},{"cell_type":"code","source":"import os\nimport shutil\nimport random\n\n# Paths\ninput_base = '/kaggle/input/flowers-recognition/flowers'\nworking_base = '/kaggle/working/datasets_folder'\ncategories = ['daisy','dandelion', 'rose', 'sunflower','tulip']  # match the actual folder names exactly\ntrain_ratio = 0.8\n\n# Step 1: Copy original data to writable working directory\nfor category in categories:\n    src_dir = os.path.join(input_base, category)\n    dst_dir = os.path.join(working_base, category)\n    os.makedirs(dst_dir, exist_ok=True)\n\n    for filename in os.listdir(src_dir):\n        src_file = os.path.join(src_dir, filename)\n        dst_file = os.path.join(dst_dir, filename)\n        try:\n            if os.path.getsize(src_file) > 0:\n                shutil.copy2(src_file, dst_file)\n        except:\n            continue  # skip corrupt or unreadable files\n\n# Step 2: Create train/test folders in working directory\nfor split in ['train', 'test']:\n    for category in categories:\n        os.makedirs(os.path.join(working_base, split, category), exist_ok=True)\n\n# Step 3: Split and copy files\nfor category in categories:\n    src_dir = os.path.join(working_base, category)\n    all_files = [f for f in os.listdir(src_dir) if os.path.getsize(os.path.join(src_dir, f)) > 0]\n    random.shuffle(all_files)\n\n    split_idx = int(len(all_files) * train_ratio)\n    train_files = all_files[:split_idx]\n    test_files = all_files[split_idx:]\n\n    for f in train_files:\n        shutil.copy2(os.path.join(src_dir, f), os.path.join(working_base, 'train', category, f))\n    for f in test_files:\n        shutil.copy2(os.path.join(src_dir, f), os.path.join(working_base, 'test', category, f))\n\nprint(\"Data split complete. Check /kaggle/working/datasets_folder/\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T10:41:07.915545Z","iopub.execute_input":"2025-07-29T10:41:07.916355Z","iopub.status.idle":"2025-07-29T10:41:42.549193Z","shell.execute_reply.started":"2025-07-29T10:41:07.916325Z","shell.execute_reply":"2025-07-29T10:41:42.548545Z"}},"outputs":[{"name":"stdout","text":"Data split complete. Check /kaggle/working/datasets_folder/\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import os\n\nfolder_path = '/kaggle/working'\n\n# List all files and directories in the given path\nif os.path.exists(folder_path):\n    contents = os.listdir(folder_path)\n    print(\"Contents of the folder:\")\n    for item in contents:\n        print(item)\nelse:\n    print(\"The folder does not exist.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T10:52:11.378875Z","iopub.execute_input":"2025-07-29T10:52:11.379388Z","iopub.status.idle":"2025-07-29T10:52:11.383763Z","shell.execute_reply.started":"2025-07-29T10:52:11.379366Z","shell.execute_reply":"2025-07-29T10:52:11.382973Z"}},"outputs":[{"name":"stdout","text":"Contents of the folder:\ndatasets_folder\n.virtual_documents\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T10:56:50.231912Z","iopub.execute_input":"2025-07-29T10:56:50.232174Z","iopub.status.idle":"2025-07-29T10:57:03.838615Z","shell.execute_reply.started":"2025-07-29T10:56:50.232157Z","shell.execute_reply":"2025-07-29T10:57:03.837859Z"}},"outputs":[{"name":"stderr","text":"2025-07-29 10:56:51.783052: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1753786612.001300      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1753786612.066928      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"train_dir=\"/kaggle/working/datasets_folder/train\"\ntest_dir=\"/kaggle/working/datasets_folder/test\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T10:57:41.751065Z","iopub.execute_input":"2025-07-29T10:57:41.751897Z","iopub.status.idle":"2025-07-29T10:57:41.756196Z","shell.execute_reply.started":"2025-07-29T10:57:41.751871Z","shell.execute_reply":"2025-07-29T10:57:41.755449Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"train_datagen = ImageDataGenerator(\n    rescale=1./255,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True\n)\n\ntest_datagen = ImageDataGenerator(rescale=1./255)\n\ntrain_generator=train_datagen.flow_from_directory(\n    train_dir,\n    batch_size=32,\n    target_size=(227, 227),\n    class_mode='categorical'\n)\n\ntest_generator=test_datagen.flow_from_directory(\n    test_dir,\n    batch_size=32,\n    target_size=(227, 227),\n    class_mode='categorical'\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T12:26:14.884953Z","iopub.execute_input":"2025-07-29T12:26:14.885523Z","iopub.status.idle":"2025-07-29T12:26:14.954221Z","shell.execute_reply.started":"2025-07-29T12:26:14.885502Z","shell.execute_reply":"2025-07-29T12:26:14.953539Z"}},"outputs":[{"name":"stdout","text":"Found 3452 images belonging to 5 classes.\nFound 865 images belonging to 5 classes.\n","output_type":"stream"}],"execution_count":48},{"cell_type":"code","source":"# Now creating the AlexNet\nmodel=Sequential()\n\nmodel.add(Conv2D(16, (11,11), strides=(4,4), activation='relu', input_shape=(227, 227, 3)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(3,3), strides=(2,2)))\n\nmodel.add(Conv2D(256, (5,5), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(3,3), strides=(2, 2)))\n\nmodel.add(Conv2D(384, (3,3), activation='relu', padding='same'))\nmodel.add(Conv2D(384, (3,3), activation='relu', padding='same'))\nmodel.add(Conv2D(256, (3,3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(3,3), strides=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(4096, activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(4096, activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(train_generator.num_classes, activation='softmax'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T12:26:28.785425Z","iopub.execute_input":"2025-07-29T12:26:28.785678Z","iopub.status.idle":"2025-07-29T12:26:28.928949Z","shell.execute_reply.started":"2025-07-29T12:26:28.785662Z","shell.execute_reply":"2025-07-29T12:26:28.928381Z"}},"outputs":[],"execution_count":49},{"cell_type":"code","source":"model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T12:26:31.271166Z","iopub.execute_input":"2025-07-29T12:26:31.271448Z","iopub.status.idle":"2025-07-29T12:26:31.294248Z","shell.execute_reply.started":"2025-07-29T12:26:31.271426Z","shell.execute_reply":"2025-07-29T12:26:31.293611Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_8\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_8\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d_36 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │         \u001b[38;5;34m5,824\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_14          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │            \u001b[38;5;34m64\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_21 (\u001b[38;5;33mMaxPooling2D\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_37 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m102,656\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_15          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │         \u001b[38;5;34m1,024\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_22 (\u001b[38;5;33mMaxPooling2D\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_38 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m384\u001b[0m)    │       \u001b[38;5;34m885,120\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_39 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m384\u001b[0m)    │     \u001b[38;5;34m1,327,488\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_40 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m884,992\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_23 (\u001b[38;5;33mMaxPooling2D\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m256\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_7 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m9216\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_20 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │    \u001b[38;5;34m37,752,832\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_13 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_21 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │    \u001b[38;5;34m16,781,312\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_14 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_22 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)              │        \u001b[38;5;34m20,485\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d_36 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │         <span style=\"color: #00af00; text-decoration-color: #00af00\">5,824</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_14          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_21 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_37 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">102,656</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_15          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_22 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_38 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">384</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">885,120</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_39 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">384</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,327,488</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_40 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">884,992</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_23 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">9216</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_20 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │    <span style=\"color: #00af00; text-decoration-color: #00af00\">37,752,832</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_21 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │    <span style=\"color: #00af00; text-decoration-color: #00af00\">16,781,312</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_22 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)              │        <span style=\"color: #00af00; text-decoration-color: #00af00\">20,485</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m57,761,797\u001b[0m (220.34 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">57,761,797</span> (220.34 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m57,761,253\u001b[0m (220.34 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">57,761,253</span> (220.34 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m544\u001b[0m (2.12 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">544</span> (2.12 KB)\n</pre>\n"},"metadata":{}}],"execution_count":50},{"cell_type":"code","source":"from tensorflow.keras.optimizers import Adam\nmodel.compile(optimizer=Adam(learning_rate=1e-4),\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])\n\nhistory=model.fit(\n    train_generator,\n    epochs=2,\n    validation_data=test_generator\n)\n\n# you can increase the epochs to increase the accuracy of the model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T12:29:39.669479Z","iopub.execute_input":"2025-07-29T12:29:39.669792Z","iopub.status.idle":"2025-07-29T12:31:14.578458Z","shell.execute_reply.started":"2025-07-29T12:29:39.669764Z","shell.execute_reply":"2025-07-29T12:31:14.577669Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/2\n\u001b[1m108/108\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 418ms/step - accuracy: 0.5833 - loss: 1.0484 - val_accuracy: 0.3919 - val_loss: 1.4408\nEpoch 2/2\n\u001b[1m108/108\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 381ms/step - accuracy: 0.6187 - loss: 0.9705 - val_accuracy: 0.5422 - val_loss: 1.1294\n","output_type":"stream"}],"execution_count":55},{"cell_type":"code","source":"test_loss, test_acc=model.evaluate(test_generator)\nprint(test_loss)\nprint(test_acc)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T12:41:38.913887Z","iopub.execute_input":"2025-07-29T12:41:38.914176Z","iopub.status.idle":"2025-07-29T12:41:41.114141Z","shell.execute_reply.started":"2025-07-29T12:41:38.914154Z","shell.execute_reply":"2025-07-29T12:41:41.113572Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m28/28\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 71ms/step - accuracy: 0.5287 - loss: 1.1614\n1.1293996572494507\n0.54219651222229\n","output_type":"stream"}],"execution_count":58},{"cell_type":"code","source":"plt.plot(history.history['accuracy'], label='Train Accuracy')\nplt.plot(history.history['val_loss'], label=\"Validation Accuracy\")\nplt.xlabel('e')\nplt.ylabel('acc')\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T12:41:43.021279Z","iopub.execute_input":"2025-07-29T12:41:43.022007Z","iopub.status.idle":"2025-07-29T12:41:43.15156Z","shell.execute_reply.started":"2025-07-29T12:41:43.021983Z","shell.execute_reply":"2025-07-29T12:41:43.150965Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":59},{"cell_type":"code","source":"model.save(\"Alex_net.h5\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T12:41:48.346984Z","iopub.execute_input":"2025-07-29T12:41:48.347712Z","iopub.status.idle":"2025-07-29T12:41:50.690437Z","shell.execute_reply.started":"2025-07-29T12:41:48.347688Z","shell.execute_reply":"2025-07-29T12:41:50.689643Z"}},"outputs":[],"execution_count":60},{"cell_type":"code","source":"# prediction\nimport numpy as np\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\n\ndef prediction(img_path, model, class_name):\n    img= load_img(img_path, target_size=(227, 227))\n    img_array=img_to_array(img) / 255.0\n    img_array=np.expand_dims(img_array, axis=0)\n\n    prediction=model.predict(img_array)\n\n    prediction_class_index=np.argmax(prediction[0])\n\n    predicted_class=class_name[prediction_class_index]\n\n    return predicted_class\n\n\nclass_names=['daisy','dandelion', 'rose', 'sunflower','tulip']\nimg_path=\"/kaggle/working/datasets_folder/daisy/100080576_f52e8ee070_n.jpg\"\npre=prediction(img_path, model, class_names)\nprint(pre)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T12:46:12.613392Z","iopub.execute_input":"2025-07-29T12:46:12.613677Z","iopub.status.idle":"2025-07-29T12:46:13.33864Z","shell.execute_reply.started":"2025-07-29T12:46:12.613656Z","shell.execute_reply":"2025-07-29T12:46:13.337933Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 661ms/step\ndandelion\n","output_type":"stream"}],"execution_count":67},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}