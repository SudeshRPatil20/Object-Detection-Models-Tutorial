{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sudeshrpatil/working-with-alex-net?scriptVersionId=263811339\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"c8fe38b1","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-09-24T18:18:00.170212Z","iopub.status.busy":"2025-09-24T18:18:00.169967Z","iopub.status.idle":"2025-09-24T18:18:00.174122Z","shell.execute_reply":"2025-09-24T18:18:00.173497Z"},"papermill":{"duration":0.009568,"end_time":"2025-09-24T18:18:00.175363","exception":false,"start_time":"2025-09-24T18:18:00.165795","status":"completed"},"tags":[]},"outputs":[],"source":["# # This Python 3 environment comes with many helpful analytics libraries installed\n","# # It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# # For example, here's several helpful packages to load\n","\n","# import numpy as np # linear algebra\n","# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# # Input data files are available in the read-only \"../input/\" directory\n","# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","# import os\n","# for dirname, _, filenames in os.walk('/kaggle/input'):\n","#     for filename in filenames:\n","#         print(os.path.join(dirname, filename))\n","\n","# # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# # You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"code","execution_count":2,"id":"cb1a50c6","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:18:00.181818Z","iopub.status.busy":"2025-09-24T18:18:00.181384Z","iopub.status.idle":"2025-09-24T18:18:03.952134Z","shell.execute_reply":"2025-09-24T18:18:03.951437Z"},"papermill":{"duration":3.774991,"end_time":"2025-09-24T18:18:03.953372","exception":false,"start_time":"2025-09-24T18:18:00.178381","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["True"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["import torch\n","torch.cuda.is_available()"]},{"cell_type":"code","execution_count":3,"id":"a056561c","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:18:03.960079Z","iopub.status.busy":"2025-09-24T18:18:03.959766Z","iopub.status.idle":"2025-09-24T18:18:51.010467Z","shell.execute_reply":"2025-09-24T18:18:51.009692Z"},"papermill":{"duration":47.057296,"end_time":"2025-09-24T18:18:51.013751","exception":false,"start_time":"2025-09-24T18:18:03.956455","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Data split complete. Check /kaggle/working/datasets_folder/\n"]}],"source":["import os\n","import shutil\n","import random\n","\n","# Paths\n","input_base = '/kaggle/input/flowers-recognition/flowers'\n","working_base = '/kaggle/working/datasets_folder'\n","categories = ['daisy','dandelion', 'rose', 'sunflower','tulip']  # match the actual folder names exactly\n","train_ratio = 0.8\n","\n","# Step 1: Copy original data to writable working directory\n","for category in categories:\n","    src_dir = os.path.join(input_base, category)\n","    dst_dir = os.path.join(working_base, category)\n","    os.makedirs(dst_dir, exist_ok=True)\n","\n","    for filename in os.listdir(src_dir):\n","        src_file = os.path.join(src_dir, filename)\n","        dst_file = os.path.join(dst_dir, filename)\n","        try:\n","            if os.path.getsize(src_file) > 0:\n","                shutil.copy2(src_file, dst_file)\n","        except:\n","            continue  # skip corrupt or unreadable files\n","\n","# Step 2: Create train/test folders in working directory\n","for split in ['train', 'test']:\n","    for category in categories:\n","        os.makedirs(os.path.join(working_base, split, category), exist_ok=True)\n","\n","# Step 3: Split and copy files\n","for category in categories:\n","    src_dir = os.path.join(working_base, category)\n","    all_files = [f for f in os.listdir(src_dir) if os.path.getsize(os.path.join(src_dir, f)) > 0]\n","    random.shuffle(all_files)\n","\n","    split_idx = int(len(all_files) * train_ratio)\n","    train_files = all_files[:split_idx]\n","    test_files = all_files[split_idx:]\n","\n","    for f in train_files:\n","        shutil.copy2(os.path.join(src_dir, f), os.path.join(working_base, 'train', category, f))\n","    for f in test_files:\n","        shutil.copy2(os.path.join(src_dir, f), os.path.join(working_base, 'test', category, f))\n","\n","print(\"Data split complete. Check /kaggle/working/datasets_folder/\")\n"]},{"cell_type":"code","execution_count":4,"id":"e3e595cf","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:18:51.019848Z","iopub.status.busy":"2025-09-24T18:18:51.019594Z","iopub.status.idle":"2025-09-24T18:18:51.024229Z","shell.execute_reply":"2025-09-24T18:18:51.023624Z"},"papermill":{"duration":0.009175,"end_time":"2025-09-24T18:18:51.025498","exception":false,"start_time":"2025-09-24T18:18:51.016323","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Contents of the folder:\n","datasets_folder\n","__notebook__.ipynb\n"]}],"source":["import os\n","\n","folder_path = '/kaggle/working'\n","\n","# List all files and directories in the given path\n","if os.path.exists(folder_path):\n","    contents = os.listdir(folder_path)\n","    print(\"Contents of the folder:\")\n","    for item in contents:\n","        print(item)\n","else:\n","    print(\"The folder does not exist.\")"]},{"cell_type":"code","execution_count":5,"id":"a12b1bd7","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:18:51.032978Z","iopub.status.busy":"2025-09-24T18:18:51.0327Z","iopub.status.idle":"2025-09-24T18:19:05.756228Z","shell.execute_reply":"2025-09-24T18:19:05.755607Z"},"papermill":{"duration":14.728961,"end_time":"2025-09-24T18:19:05.757498","exception":false,"start_time":"2025-09-24T18:18:51.028537","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2025-09-24 18:18:52.377159: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n","E0000 00:00:1758737932.559014      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","E0000 00:00:1758737932.615385      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"]}],"source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":6,"id":"e051fe69","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:19:05.764292Z","iopub.status.busy":"2025-09-24T18:19:05.763893Z","iopub.status.idle":"2025-09-24T18:19:05.767414Z","shell.execute_reply":"2025-09-24T18:19:05.766757Z"},"papermill":{"duration":0.007803,"end_time":"2025-09-24T18:19:05.768461","exception":false,"start_time":"2025-09-24T18:19:05.760658","status":"completed"},"tags":[]},"outputs":[],"source":["train_dir=\"/kaggle/working/datasets_folder/train\"\n","test_dir=\"/kaggle/working/datasets_folder/test\""]},{"cell_type":"code","execution_count":7,"id":"1fd76643","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:19:05.77448Z","iopub.status.busy":"2025-09-24T18:19:05.774281Z","iopub.status.idle":"2025-09-24T18:19:05.84328Z","shell.execute_reply":"2025-09-24T18:19:05.842797Z"},"papermill":{"duration":0.073061,"end_time":"2025-09-24T18:19:05.844292","exception":false,"start_time":"2025-09-24T18:19:05.771231","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 3452 images belonging to 5 classes.\n","Found 865 images belonging to 5 classes.\n"]}],"source":["train_datagen = ImageDataGenerator(\n","    rescale=1./255,\n","    rotation_range=20,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    shear_range=0.2,\n","    zoom_range=0.2,\n","    horizontal_flip=True\n",")\n","\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","train_generator=train_datagen.flow_from_directory(\n","    train_dir,\n","    batch_size=32,\n","    target_size=(227, 227),\n","    class_mode='categorical'\n",")\n","\n","test_generator=test_datagen.flow_from_directory(\n","    test_dir,\n","    batch_size=32,\n","    target_size=(227, 227),\n","    class_mode='categorical'\n",")"]},{"cell_type":"code","execution_count":8,"id":"20cec714","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:19:05.85098Z","iopub.status.busy":"2025-09-24T18:19:05.850389Z","iopub.status.idle":"2025-09-24T18:19:07.535852Z","shell.execute_reply":"2025-09-24T18:19:07.535249Z"},"papermill":{"duration":1.690167,"end_time":"2025-09-24T18:19:07.537173","exception":false,"start_time":"2025-09-24T18:19:05.847006","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","I0000 00:00:1758737946.170093      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n","I0000 00:00:1758737946.170791      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"]}],"source":["# Now creating the AlexNet\n","model=Sequential()\n","\n","model.add(Conv2D(16, (11,11), strides=(4,4), activation='relu', input_shape=(227, 227, 3)))\n","model.add(BatchNormalization())\n","model.add(MaxPooling2D(pool_size=(3,3), strides=(2,2)))\n","\n","model.add(Conv2D(256, (5,5), activation='relu', padding='same'))\n","model.add(BatchNormalization())\n","model.add(MaxPooling2D(pool_size=(3,3), strides=(2, 2)))\n","\n","model.add(Conv2D(384, (3,3), activation='relu', padding='same'))\n","model.add(Conv2D(384, (3,3), activation='relu', padding='same'))\n","model.add(Conv2D(256, (3,3), activation='relu', padding='same'))\n","model.add(MaxPooling2D(pool_size=(3,3), strides=(2, 2)))\n","\n","model.add(Flatten())\n","model.add(Dense(4096, activation='relu'))\n","model.add(Dropout(0.5))\n","\n","model.add(Dense(4096, activation='relu'))\n","model.add(Dropout(0.5))\n","\n","model.add(Dense(train_generator.num_classes, activation='softmax'))"]},{"cell_type":"code","execution_count":9,"id":"417d2123","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:19:07.545135Z","iopub.status.busy":"2025-09-24T18:19:07.54474Z","iopub.status.idle":"2025-09-24T18:19:07.564922Z","shell.execute_reply":"2025-09-24T18:19:07.564244Z"},"papermill":{"duration":0.0255,"end_time":"2025-09-24T18:19:07.565933","exception":false,"start_time":"2025-09-24T18:19:07.540433","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n","</pre>\n"],"text/plain":["\u001b[1mModel: \"sequential\"\u001b[0m\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │         <span style=\"color: #00af00; text-decoration-color: #00af00\">5,824</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">102,656</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ batch_normalization_1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">27</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">384</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">885,120</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">384</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,327,488</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">884,992</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">9216</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │    <span style=\"color: #00af00; text-decoration-color: #00af00\">37,752,832</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │    <span style=\"color: #00af00; text-decoration-color: #00af00\">16,781,312</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)              │        <span style=\"color: #00af00; text-decoration-color: #00af00\">20,485</span> │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n","</pre>\n"],"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │         \u001b[38;5;34m5,824\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │            \u001b[38;5;34m64\u001b[0m │\n","│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m102,656\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ batch_normalization_1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m27\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │         \u001b[38;5;34m1,024\u001b[0m │\n","│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m384\u001b[0m)    │       \u001b[38;5;34m885,120\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m384\u001b[0m)    │     \u001b[38;5;34m1,327,488\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_4 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m884,992\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m256\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m9216\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │    \u001b[38;5;34m37,752,832\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │    \u001b[38;5;34m16,781,312\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)              │        \u001b[38;5;34m20,485\u001b[0m │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">57,761,797</span> (220.34 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m57,761,797\u001b[0m (220.34 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">57,761,253</span> (220.34 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m57,761,253\u001b[0m (220.34 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">544</span> (2.12 KB)\n","</pre>\n"],"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m544\u001b[0m (2.12 KB)\n"]},"metadata":{},"output_type":"display_data"}],"source":["model.summary()"]},{"cell_type":"code","execution_count":10,"id":"4915e2ee","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:19:07.573679Z","iopub.status.busy":"2025-09-24T18:19:07.573303Z","iopub.status.idle":"2025-09-24T18:20:50.878421Z","shell.execute_reply":"2025-09-24T18:20:50.877478Z"},"papermill":{"duration":103.310656,"end_time":"2025-09-24T18:20:50.879923","exception":false,"start_time":"2025-09-24T18:19:07.569267","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"name":"stdout","output_type":"stream","text":["Epoch 1/2\n"]},{"name":"stderr","output_type":"stream","text":["WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n","I0000 00:00:1758737953.383544      76 service.cc:148] XLA service 0x7b3a4c006780 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n","I0000 00:00:1758737953.384299      76 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n","I0000 00:00:1758737953.384322      76 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n","I0000 00:00:1758737953.957336      76 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[1m  2/108\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m6s\u001b[0m 65ms/step - accuracy: 0.2266 - loss: 2.9614  "]},{"name":"stderr","output_type":"stream","text":["I0000 00:00:1758737959.924959      76 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[1m108/108\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m60s\u001b[0m 457ms/step - accuracy: 0.3254 - loss: 1.8271 - val_accuracy: 0.2566 - val_loss: 1.5709\n","Epoch 2/2\n","\u001b[1m108/108\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 388ms/step - accuracy: 0.5400 - loss: 1.1457 - val_accuracy: 0.2832 - val_loss: 1.5205\n"]}],"source":["from tensorflow.keras.optimizers import Adam\n","model.compile(optimizer=Adam(learning_rate=1e-4),\n","             loss='categorical_crossentropy',\n","             metrics=['accuracy'])\n","\n","history=model.fit(\n","    train_generator,\n","    epochs=2,\n","    validation_data=test_generator\n",")\n","\n","# you can increase the epochs to increase the accuracy of the model"]},{"cell_type":"code","execution_count":11,"id":"e2623e2d","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:20:50.906377Z","iopub.status.busy":"2025-09-24T18:20:50.906135Z","iopub.status.idle":"2025-09-24T18:20:52.926591Z","shell.execute_reply":"2025-09-24T18:20:52.926015Z"},"papermill":{"duration":2.035093,"end_time":"2025-09-24T18:20:52.927879","exception":false,"start_time":"2025-09-24T18:20:50.892786","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m28/28\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 64ms/step - accuracy: 0.2843 - loss: 1.5237\n","1.5205349922180176\n","0.2832369804382324\n"]}],"source":["test_loss, test_acc=model.evaluate(test_generator)\n","print(test_loss)\n","print(test_acc)"]},{"cell_type":"code","execution_count":12,"id":"2199b708","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:20:52.956859Z","iopub.status.busy":"2025-09-24T18:20:52.956582Z","iopub.status.idle":"2025-09-24T18:20:53.116667Z","shell.execute_reply":"2025-09-24T18:20:53.115981Z"},"papermill":{"duration":0.176067,"end_time":"2025-09-24T18:20:53.117981","exception":false,"start_time":"2025-09-24T18:20:52.941914","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(history.history['accuracy'], label='Train Accuracy')\n","plt.plot(history.history['val_loss'], label=\"Validation Accuracy\")\n","plt.xlabel('e')\n","plt.ylabel('acc')\n","plt.legend()\n","plt.show()\n"]},{"cell_type":"code","execution_count":13,"id":"c922a529","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:20:53.146999Z","iopub.status.busy":"2025-09-24T18:20:53.146787Z","iopub.status.idle":"2025-09-24T18:20:54.857132Z","shell.execute_reply":"2025-09-24T18:20:54.856501Z"},"papermill":{"duration":1.726031,"end_time":"2025-09-24T18:20:54.858499","exception":false,"start_time":"2025-09-24T18:20:53.132468","status":"completed"},"tags":[]},"outputs":[],"source":["model.save(\"Alex_net.h5\")"]},{"cell_type":"code","execution_count":14,"id":"c7567f84","metadata":{"execution":{"iopub.execute_input":"2025-09-24T18:20:54.887505Z","iopub.status.busy":"2025-09-24T18:20:54.887286Z","iopub.status.idle":"2025-09-24T18:20:55.629396Z","shell.execute_reply":"2025-09-24T18:20:55.62867Z"},"papermill":{"duration":0.757965,"end_time":"2025-09-24T18:20:55.630528","exception":false,"start_time":"2025-09-24T18:20:54.872563","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 680ms/step\n","dandelion\n"]}],"source":["# prediction\n","import numpy as np\n","from tensorflow.keras.preprocessing.image import load_img, img_to_array\n","\n","def prediction(img_path, model, class_name):\n","    img= load_img(img_path, target_size=(227, 227))\n","    img_array=img_to_array(img) / 255.0\n","    img_array=np.expand_dims(img_array, axis=0)\n","\n","    prediction=model.predict(img_array)\n","\n","    prediction_class_index=np.argmax(prediction[0])\n","\n","    predicted_class=class_name[prediction_class_index]\n","\n","    return predicted_class\n","\n","\n","class_names=['daisy','dandelion', 'rose', 'sunflower','tulip']\n","img_path=\"/kaggle/working/datasets_folder/daisy/100080576_f52e8ee070_n.jpg\"\n","pre=prediction(img_path, model, class_names)\n","print(pre)"]},{"cell_type":"code","execution_count":null,"id":"52f6abf2","metadata":{"papermill":{"duration":0.013565,"end_time":"2025-09-24T18:20:55.659425","exception":false,"start_time":"2025-09-24T18:20:55.64586","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"datasetId":8782,"sourceId":2431805,"sourceType":"datasetVersion"}],"dockerImageVersionId":31090,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"papermill":{"default_parameters":{},"duration":183.244321,"end_time":"2025-09-24T18:20:59.432621","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-09-24T18:17:56.1883","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}