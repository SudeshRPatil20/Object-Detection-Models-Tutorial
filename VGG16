{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":7087287,"sourceType":"datasetVersion","datasetId":4083540}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# # For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# # Input data files are available in the read-only \"../input/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\ntorch.cuda.is_available()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:28:11.257939Z","iopub.execute_input":"2025-08-01T10:28:11.258117Z","iopub.status.idle":"2025-08-01T10:28:18.827175Z","shell.execute_reply.started":"2025-08-01T10:28:11.258100Z","shell.execute_reply":"2025-08-01T10:28:18.826359Z"}},"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}],"execution_count":1},{"cell_type":"code","source":"import torch\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision.datasets as datasets\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom torch.utils.data import DataLoader\nfrom PIL import Image\nimport numpy as np\nimport json\nimport os","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:29:31.063646Z","iopub.execute_input":"2025-08-01T10:29:31.064016Z","iopub.status.idle":"2025-08-01T10:29:31.068750Z","shell.execute_reply.started":"2025-08-01T10:29:31.063993Z","shell.execute_reply":"2025-08-01T10:29:31.068156Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"transformation={\n    'train':transforms.Compose([\n        transforms.RandomResizedCrop(224),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    ]),\n    'test':transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    ])\n}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:41:25.933114Z","iopub.execute_input":"2025-08-01T10:41:25.933909Z","iopub.status.idle":"2025-08-01T10:41:25.938418Z","shell.execute_reply.started":"2025-08-01T10:41:25.933884Z","shell.execute_reply":"2025-08-01T10:41:25.937660Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"train_df=datasets.ImageFolder(root=\"/kaggle/input/flowers-dataset/train\", transform=transformation['train'])\ntest_df=datasets.ImageFolder(root=\"/kaggle/input/flowers-dataset/test\", transform=transformation['test'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:41:27.258316Z","iopub.execute_input":"2025-08-01T10:41:27.259004Z","iopub.status.idle":"2025-08-01T10:41:27.991532Z","shell.execute_reply.started":"2025-08-01T10:41:27.258971Z","shell.execute_reply":"2025-08-01T10:41:27.990766Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"train_loader=DataLoader(train_df, batch_size=32, shuffle=True)\ntest_loader=DataLoader(test_df, batch_size=32, shuffle=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:43:10.392759Z","iopub.execute_input":"2025-08-01T10:43:10.393080Z","iopub.status.idle":"2025-08-01T10:43:10.398031Z","shell.execute_reply.started":"2025-08-01T10:43:10.393059Z","shell.execute_reply":"2025-08-01T10:43:10.397228Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"model=models.vgg16(pretrained=True)\n\n\n\nnum_features_5=model.classifier[3].out_features\nmodel.classifier[4] = nn.ReLU(inplace=True)  # optional, typically unchanged\nmodel.classifier[5] = nn.Linear(num_features_5, 512)  # new penultimate layer\nmodel.classifier[6] = nn.Linear(512, len(train_df.classes))\n\n# for param in model.features.parameters():\n#     param.requires_grad=False\n\n# num_features=model.classifier[].in_features\n# model.classifier[5]=nn.Linear(num_features, len(train_df.classes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T12:17:52.401098Z","iopub.execute_input":"2025-08-01T12:17:52.401600Z","iopub.status.idle":"2025-08-01T12:17:54.073497Z","shell.execute_reply.started":"2025-08-01T12:17:52.401577Z","shell.execute_reply":"2025-08-01T12:17:54.072882Z"}},"outputs":[],"execution_count":67},{"cell_type":"code","source":"model.classifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T12:18:33.409058Z","iopub.execute_input":"2025-08-01T12:18:33.409835Z","iopub.status.idle":"2025-08-01T12:18:33.414702Z","shell.execute_reply.started":"2025-08-01T12:18:33.409810Z","shell.execute_reply":"2025-08-01T12:18:33.414043Z"}},"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"Sequential(\n  (0): Linear(in_features=25088, out_features=4096, bias=True)\n  (1): ReLU(inplace=True)\n  (2): Dropout(p=0.5, inplace=False)\n  (3): Linear(in_features=4096, out_features=4096, bias=True)\n  (4): ReLU(inplace=True)\n  (5): Linear(in_features=4096, out_features=512, bias=True)\n  (6): Linear(in_features=512, out_features=2, bias=True)\n)"},"metadata":{}}],"execution_count":72},{"cell_type":"code","source":"from torchsummary import summary\n\ncriterion=nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.classifier[6].parameters() ,lr=0.001)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\nsummary(model, input_size=(3, 244, 244))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T12:18:51.968051Z","iopub.execute_input":"2025-08-01T12:18:51.968326Z","iopub.status.idle":"2025-08-01T12:18:51.984239Z","shell.execute_reply.started":"2025-08-01T12:18:51.968309Z","shell.execute_reply":"2025-08-01T12:18:51.983555Z"}},"outputs":[{"name":"stdout","text":"----------------------------------------------------------------\n        Layer (type)               Output Shape         Param #\n================================================================\n            Conv2d-1         [-1, 64, 244, 244]           1,792\n              ReLU-2         [-1, 64, 244, 244]               0\n            Conv2d-3         [-1, 64, 244, 244]          36,928\n              ReLU-4         [-1, 64, 244, 244]               0\n         MaxPool2d-5         [-1, 64, 122, 122]               0\n            Conv2d-6        [-1, 128, 122, 122]          73,856\n              ReLU-7        [-1, 128, 122, 122]               0\n            Conv2d-8        [-1, 128, 122, 122]         147,584\n              ReLU-9        [-1, 128, 122, 122]               0\n        MaxPool2d-10          [-1, 128, 61, 61]               0\n           Conv2d-11          [-1, 256, 61, 61]         295,168\n             ReLU-12          [-1, 256, 61, 61]               0\n           Conv2d-13          [-1, 256, 61, 61]         590,080\n             ReLU-14          [-1, 256, 61, 61]               0\n           Conv2d-15          [-1, 256, 61, 61]         590,080\n             ReLU-16          [-1, 256, 61, 61]               0\n        MaxPool2d-17          [-1, 256, 30, 30]               0\n           Conv2d-18          [-1, 512, 30, 30]       1,180,160\n             ReLU-19          [-1, 512, 30, 30]               0\n           Conv2d-20          [-1, 512, 30, 30]       2,359,808\n             ReLU-21          [-1, 512, 30, 30]               0\n           Conv2d-22          [-1, 512, 30, 30]       2,359,808\n             ReLU-23          [-1, 512, 30, 30]               0\n        MaxPool2d-24          [-1, 512, 15, 15]               0\n           Conv2d-25          [-1, 512, 15, 15]       2,359,808\n             ReLU-26          [-1, 512, 15, 15]               0\n           Conv2d-27          [-1, 512, 15, 15]       2,359,808\n             ReLU-28          [-1, 512, 15, 15]               0\n           Conv2d-29          [-1, 512, 15, 15]       2,359,808\n             ReLU-30          [-1, 512, 15, 15]               0\n        MaxPool2d-31            [-1, 512, 7, 7]               0\nAdaptiveAvgPool2d-32            [-1, 512, 7, 7]               0\n           Linear-33                 [-1, 4096]     102,764,544\n             ReLU-34                 [-1, 4096]               0\n          Dropout-35                 [-1, 4096]               0\n           Linear-36                 [-1, 4096]      16,781,312\n             ReLU-37                 [-1, 4096]               0\n           Linear-38                  [-1, 512]       2,097,664\n           Linear-39                    [-1, 2]           1,026\n================================================================\nTotal params: 136,359,234\nTrainable params: 136,359,234\nNon-trainable params: 0\n----------------------------------------------------------------\nInput size (MB): 0.68\nForward/backward pass size (MB): 258.48\nParams size (MB): 520.17\nEstimated Total Size (MB): 779.33\n----------------------------------------------------------------\n","output_type":"stream"}],"execution_count":73},{"cell_type":"code","source":"def train_model(model, train_loader, val_loader, criterion, optimizer, epochs=10):\n    train_losses, val_losses, val_accuracies = [], [], []\n    best_accuracy=0.0\n\n    for epoch in range(epochs):\n        model.train()\n        running_loss=0.0\n        for images, lable in train_loader:\n            images, lable = images.to(device), lable.to(device)\n            optimizer.zero_grad()\n            outputs=model(images)\n            loss=criterion(outputs, lable)\n            loss.backward()\n            optimizer.step()\n            running_loss += loss.item()\n        train_losses.append(running_loss / len(train_loader))\n\n        model.eval()\n        val_loss=0.0\n        currect, total=0, 0\n        with torch.no_grad():\n            for images, lable in val_loader:\n                images, lable=images.to(device), lable.to(device)\n                outputs = model(images)\n                loss=criterion(outputs, lable)\n                val_loss += loss.item()\n                _, predicted=torch.max(outputs, 1)\n                total += lable.size(0)\n                currect += (predicted == lable).sum().item()\n\n        val_losses.append(val_loss / len(val_loader))\n        val_accuracy = currect / total\n        val_accuracies.append(val_accuracy)\n\n        print(f\"Epoch {epoch+1}/{epochs}, Train Loss: {train_losses[-1]:.4f}, Val Loss : {val_losses[-1]:.4f}\")\n\n        if val_accuracy > best_accuracy:\n            best_accuracy =val_accuracy\n            torch.save(model.state_dict(), 'best_model.pth')\n            print(\"Model checked save\")\n    return train_losses, val_losses, val_accuracy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T12:18:54.993386Z","iopub.execute_input":"2025-08-01T12:18:54.993960Z","iopub.status.idle":"2025-08-01T12:18:55.001383Z","shell.execute_reply.started":"2025-08-01T12:18:54.993938Z","shell.execute_reply":"2025-08-01T12:18:55.000647Z"}},"outputs":[],"execution_count":74},{"cell_type":"code","source":"train_losses, val_losses, val_accuracy=train_model(model, train_loader, test_loader, criterion, optimizer, epochs=2 )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T12:18:55.362981Z","iopub.execute_input":"2025-08-01T12:18:55.363594Z","iopub.status.idle":"2025-08-01T12:20:00.020411Z","shell.execute_reply.started":"2025-08-01T12:18:55.363571Z","shell.execute_reply":"2025-08-01T12:20:00.019621Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/2, Train Loss: 0.4268, Val Loss : 0.2842\nModel checked save\nEpoch 2/2, Train Loss: 0.2800, Val Loss : 0.2279\n","output_type":"stream"}],"execution_count":75},{"cell_type":"code","source":"model.load_state_dict(torch.load('/kaggle/working/best_model.pth'))\nmodel.eval()\n\ndef plot_confusion_matrix(model, dataloader):\n    from sklearn.metrics import confusion_matrix\n    import pandas as pd\n\n    all_preds, all_labels=[], []\n    with torch.no_grad():\n        for images, lable in dataloader:\n            images, lable = images.to(device), lable.to(device)\n            outputs=model(images)\n            _, preds = torch.max(outputs, 1)\n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(lable.cpu().numpy())\n    cm=confusion_matrix(all_labels, all_preds)\n    plt.figure(figsize=(10,8))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=train_df.classes, yticklabels=train_df.classes)\n    plt.xlabel('prediction')\n    plt.ylabel('true labels')\n    plt.title('confution metrix')\n    plt.show()\nplot_confusion_matrix(model, test_loader)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T12:20:00.021820Z","iopub.execute_input":"2025-08-01T12:20:00.022039Z","iopub.status.idle":"2025-08-01T12:20:02.923281Z","shell.execute_reply.started":"2025-08-01T12:20:00.022023Z","shell.execute_reply":"2025-08-01T12:20:02.922581Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":76},{"cell_type":"code","source":"# we need to increase the accuracy\n#model_inferencing\ndef infer(img_path, model):\n    image=Image.open(img_path)\n    image=transformation['test'](image).unsqueeze(0).to(device)\n    model.eval()\n    with torch.no_grad():\n        output=model(image)\n    probabilities=torch.nn.functional.softmax(output[0], dim=0)\n    k=min(5, probabilities.size(0))\n    top5_prob, top5_catid=probabilities.topk(k)\n    results=[(train_df.classes[catid], prob.item()) for catid, prob in zip(top5_catid, top5_prob)]\n    return results\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T12:20:02.924025Z","iopub.execute_input":"2025-08-01T12:20:02.924288Z","iopub.status.idle":"2025-08-01T12:20:02.929635Z","shell.execute_reply.started":"2025-08-01T12:20:02.924269Z","shell.execute_reply":"2025-08-01T12:20:02.929097Z"}},"outputs":[],"execution_count":77},{"cell_type":"code","source":"img_path=\"/kaggle/input/flowers-dataset/train/daisy/100080576_f52e8ee070_n_jpg.rf.7304a94072d861e72591569a23415323.jpg\"\nresults=infer(img_path, model)\nfor lable, image in results:\n    print(f\"{lable}:{image}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T12:20:02.930894Z","iopub.execute_input":"2025-08-01T12:20:02.931111Z","iopub.status.idle":"2025-08-01T12:20:03.014194Z","shell.execute_reply.started":"2025-08-01T12:20:02.931094Z","shell.execute_reply":"2025-08-01T12:20:03.013640Z"}},"outputs":[{"name":"stdout","text":"daisy:0.9628598093986511\ndandelion:0.03714020550251007\n","output_type":"stream"}],"execution_count":78},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}